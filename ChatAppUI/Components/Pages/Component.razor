@page "/instagram"

@using Microsoft.AspNetCore.SignalR.Client;
@using Users


<h3>Instagram</h3>

<section>
    <h2>Messages</h2>
    <article>
        <img src="" />
        <h3>User1</h3>
    </article>
    <article>
        <img src="" />
        <h3>User2</h3>
    </article>
    <article>
        <img src="" />
        <h3>User3</h3>
    </article>
    <article>
        <img src="" />
        <h3>User4</h3>
    </article>
</section>

<section>
    <h2>Chat with User</h2>
    <p class="received">
        Sainuu?
    </p>
    <p class="sent">
        Sain, sainuu?
    </p>
    @foreach (var message in messages)
    {
        <p>
            @message
        </p>
    }
</section>

@if (users.Count > 0)
{
    <ul>
        @foreach (var userid in users)
        {
            <li>
                @userid
            </li>
        }
    </ul>
}
<footer>
    <label>
        To:
        <input @bind="toUser" />
    </label>
    <textarea placeholder="Type to chat..." @bind="sendingMessage" />
    <button @onclick="OnSendChat">Send</button>
</footer>


@code {

    private HubConnection? hubConnection;
    private string sendingMessage;
    private List<string> messages;
    private List<string> users;
    private string toUser;

    private async Task OnSendChat(MouseEventArgs e)
    {
        var user = new User(5, "User1", "", "@ChatMangas", toUser);
        await hubConnection?.SendAsync("SendMessage", user, sendingMessage);
    }

    protected override async Task OnInitializedAsync()
    {

        messages = new();
        users = new();
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7351/instagram/mainhub").Build();

        hubConnection.On<User, string>("MessageReceived", OnMessageReceived);
        hubConnection.On<string>("UserConnected", OnUserConnected);

        await hubConnection.StartAsync();
    }
    private async Task OnMessageReceived(User user, string msg)
    {
        messages.Add(msg);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnUserConnected(string userid)
    {
        Console.WriteLine($"User connected {userid}");

        users.Add(userid);
        await InvokeAsync(StateHasChanged);
    }
}